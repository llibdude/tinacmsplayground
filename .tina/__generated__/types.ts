//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  sys?: Maybe<SystemInfo>;
  id: Scalars['ID'];
  form: Scalars['JSON'];
  values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
};

export type Query = {
  __typename?: 'Query';
  getCollection: Collection;
  getCollections: Array<Collection>;
  node: Node;
  getDocument: DocumentNode;
  getDocumentList: DocumentConnection;
  getDocumentFields: Scalars['JSON'];
  getCampaignsDocument: CampaignsDocument;
  getCampaignsList: CampaignsConnection;
};


export type QueryGetCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};


export type QueryGetCampaignsDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetCampaignsListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
};

export type DocumentNode = CampaignsDocument;

export type CampaignsHeroMediaImageMedia = {
  __typename?: 'CampaignsHeroMediaImageMedia';
  featureImage?: Maybe<Scalars['String']>;
};

export type CampaignsHeroMediaMdxMedia = {
  __typename?: 'CampaignsHeroMediaMdxMedia';
  featureMDX?: Maybe<Scalars['JSON']>;
};

export type CampaignsHeroMediaYoutubeMedia = {
  __typename?: 'CampaignsHeroMediaYoutubeMedia';
  featureYoutube?: Maybe<Scalars['String']>;
  featureYoutubeTitle?: Maybe<Scalars['String']>;
};

export type CampaignsHeroMedia = CampaignsHeroMediaImageMedia | CampaignsHeroMediaMdxMedia | CampaignsHeroMediaYoutubeMedia;

export type CampaignsHero = {
  __typename?: 'CampaignsHero';
  media?: Maybe<Array<Maybe<CampaignsHeroMedia>>>;
  title?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['JSON']>;
};

export type CampaignsBlocksGenericFeature = {
  __typename?: 'CampaignsBlocksGenericFeature';
  title?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['JSON']>;
};

export type CampaignsBlocks = CampaignsBlocksGenericFeature;

export type Campaigns = {
  __typename?: 'Campaigns';
  hero?: Maybe<CampaignsHero>;
  blocks?: Maybe<Array<Maybe<CampaignsBlocks>>>;
};

export type CampaignsDocument = Node & Document & {
  __typename?: 'CampaignsDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Campaigns;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type CampaignsConnectionEdges = {
  __typename?: 'CampaignsConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<CampaignsDocument>;
};

export type CampaignsConnection = Connection & {
  __typename?: 'CampaignsConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<CampaignsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  createDocument: DocumentNode;
  updateCampaignsDocument: CampaignsDocument;
  createCampaignsDocument: CampaignsDocument;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateCampaignsDocumentArgs = {
  relativePath: Scalars['String'];
  params: CampaignsMutation;
};


export type MutationCreateCampaignsDocumentArgs = {
  relativePath: Scalars['String'];
  params: CampaignsMutation;
};

export type DocumentMutation = {
  campaigns?: InputMaybe<CampaignsMutation>;
};

export type CampaignsHeroMediaImageMediaMutation = {
  featureImage?: InputMaybe<Scalars['String']>;
};

export type CampaignsHeroMediaMdxMediaMutation = {
  featureMDX?: InputMaybe<Scalars['JSON']>;
};

export type CampaignsHeroMediaYoutubeMediaMutation = {
  featureYoutube?: InputMaybe<Scalars['String']>;
  featureYoutubeTitle?: InputMaybe<Scalars['String']>;
};

export type CampaignsHeroMediaMutation = {
  imageMedia?: InputMaybe<CampaignsHeroMediaImageMediaMutation>;
  mdxMedia?: InputMaybe<CampaignsHeroMediaMdxMediaMutation>;
  youtubeMedia?: InputMaybe<CampaignsHeroMediaYoutubeMediaMutation>;
};

export type CampaignsHeroMutation = {
  media?: InputMaybe<Array<InputMaybe<CampaignsHeroMediaMutation>>>;
  title?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['JSON']>;
};

export type CampaignsBlocksGenericFeatureMutation = {
  title?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['JSON']>;
};

export type CampaignsBlocksMutation = {
  genericFeature?: InputMaybe<CampaignsBlocksGenericFeatureMutation>;
};

export type CampaignsMutation = {
  hero?: InputMaybe<CampaignsHeroMutation>;
  blocks?: InputMaybe<Array<InputMaybe<CampaignsBlocksMutation>>>;
};

export type CampaignsPartsFragment = { __typename?: 'Campaigns', hero?: { __typename: 'CampaignsHero', title?: string | null, text?: any | null, media?: Array<{ __typename: 'CampaignsHeroMediaImageMedia', featureImage?: string | null } | { __typename: 'CampaignsHeroMediaMdxMedia', featureMDX?: any | null } | { __typename: 'CampaignsHeroMediaYoutubeMedia', featureYoutube?: string | null, featureYoutubeTitle?: string | null } | null> | null } | null, blocks?: Array<{ __typename: 'CampaignsBlocksGenericFeature', title?: string | null, text?: any | null } | null> | null };

export type GetCampaignsDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetCampaignsDocumentQuery = { __typename?: 'Query', getCampaignsDocument: { __typename?: 'CampaignsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Campaigns', hero?: { __typename: 'CampaignsHero', title?: string | null, text?: any | null, media?: Array<{ __typename: 'CampaignsHeroMediaImageMedia', featureImage?: string | null } | { __typename: 'CampaignsHeroMediaMdxMedia', featureMDX?: any | null } | { __typename: 'CampaignsHeroMediaYoutubeMedia', featureYoutube?: string | null, featureYoutubeTitle?: string | null } | null> | null } | null, blocks?: Array<{ __typename: 'CampaignsBlocksGenericFeature', title?: string | null, text?: any | null } | null> | null } } };

export type GetCampaignsListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCampaignsListQuery = { __typename?: 'Query', getCampaignsList: { __typename?: 'CampaignsConnection', totalCount: number, edges?: Array<{ __typename?: 'CampaignsConnectionEdges', node?: { __typename?: 'CampaignsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Campaigns', hero?: { __typename: 'CampaignsHero', title?: string | null, text?: any | null, media?: Array<{ __typename: 'CampaignsHeroMediaImageMedia', featureImage?: string | null } | { __typename: 'CampaignsHeroMediaMdxMedia', featureMDX?: any | null } | { __typename: 'CampaignsHeroMediaYoutubeMedia', featureYoutube?: string | null, featureYoutubeTitle?: string | null } | null> | null } | null, blocks?: Array<{ __typename: 'CampaignsBlocksGenericFeature', title?: string | null, text?: any | null } | null> | null } } | null } | null> | null } };

export const CampaignsPartsFragmentDoc = gql`
    fragment CampaignsParts on Campaigns {
  hero {
    __typename
    media {
      __typename
      ... on CampaignsHeroMediaImageMedia {
        featureImage
      }
      ... on CampaignsHeroMediaMdxMedia {
        featureMDX
      }
      ... on CampaignsHeroMediaYoutubeMedia {
        featureYoutube
        featureYoutubeTitle
      }
    }
    title
    text
  }
  blocks {
    __typename
    ... on CampaignsBlocksGenericFeature {
      title
      text
    }
  }
}
    `;
export const GetCampaignsDocumentDocument = gql`
    query getCampaignsDocument($relativePath: String!) {
  getCampaignsDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...CampaignsParts
    }
  }
}
    ${CampaignsPartsFragmentDoc}`;
export const GetCampaignsListDocument = gql`
    query getCampaignsList {
  getCampaignsList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...CampaignsParts
        }
      }
    }
  }
}
    ${CampaignsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      getCampaignsDocument(variables: GetCampaignsDocumentQueryVariables, options?: C): Promise<{data: GetCampaignsDocumentQuery, variables: GetCampaignsDocumentQueryVariables, query: string}> {
        return requester<{data: GetCampaignsDocumentQuery, variables: GetCampaignsDocumentQueryVariables, query: string}, GetCampaignsDocumentQueryVariables>(GetCampaignsDocumentDocument, variables, options);
      },
    getCampaignsList(variables?: GetCampaignsListQueryVariables, options?: C): Promise<{data: GetCampaignsListQuery, variables: GetCampaignsListQueryVariables, query: string}> {
        return requester<{data: GetCampaignsListQuery, variables: GetCampaignsListQueryVariables, query: string}, GetCampaignsListQueryVariables>(GetCampaignsListDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {}
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    })
  } catch (e) {
    // swallow errors related to document creation
    console.warn('Warning: There was an error when fetching data')
    console.warn(e)
  }

  return { data, query: doc, variables: vars || {} }
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)


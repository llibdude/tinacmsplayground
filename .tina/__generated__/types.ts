//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  sys?: Maybe<SystemInfo>;
  id: Scalars['ID'];
  form: Scalars['JSON'];
  values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  getCollection: Collection;
  getCollections: Array<Collection>;
  node: Node;
  getDocument: DocumentNode;
  getDocumentList: DocumentConnection;
  getDocumentFields: Scalars['JSON'];
  getGlobalsDocument: GlobalsDocument;
  getGlobalsList: GlobalsConnection;
  getProjectsDocument: ProjectsDocument;
  getProjectsList: ProjectsConnection;
  getHomeDocument: HomeDocument;
  getHomeList: HomeConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryGetCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryGetGlobalsDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetGlobalsListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryGetProjectsDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetProjectsListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryGetHomeDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetHomeListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentNode = GlobalsDocument | ProjectsDocument | HomeDocument;

export type GlobalsNavItems = {
  __typename?: 'GlobalsNavItems';
  text: Scalars['String'];
  url: Scalars['String'];
  button?: Maybe<Scalars['Boolean']>;
};

export type GlobalsFooterContactFormText = {
  __typename?: 'GlobalsFooterContactFormText';
  title?: Maybe<Scalars['String']>;
  shortText?: Maybe<Scalars['String']>;
};

export type GlobalsFooter = {
  __typename?: 'GlobalsFooter';
  logo: Scalars['String'];
  contactFormText?: Maybe<GlobalsFooterContactFormText>;
  contactDetails?: Maybe<Scalars['String']>;
};

export type GlobalsBrandColours = {
  __typename?: 'GlobalsBrandColours';
  primary?: Maybe<Scalars['String']>;
};

export type GlobalsBrand = {
  __typename?: 'GlobalsBrand';
  colours?: Maybe<GlobalsBrandColours>;
};

export type Globals = {
  __typename?: 'Globals';
  logo: Scalars['String'];
  icon: Scalars['String'];
  navItems?: Maybe<Array<Maybe<GlobalsNavItems>>>;
  footer?: Maybe<GlobalsFooter>;
  brand?: Maybe<GlobalsBrand>;
};

export type GlobalsDocument = Node & Document & {
  __typename?: 'GlobalsDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Globals;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type GlobalsConnectionEdges = {
  __typename?: 'GlobalsConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<GlobalsDocument>;
};

export type GlobalsConnection = Connection & {
  __typename?: 'GlobalsConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<GlobalsConnectionEdges>>>;
};

export type ProjectsSeo = {
  __typename?: 'ProjectsSeo';
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  socialImage?: Maybe<Scalars['String']>;
};

export type Projects = {
  __typename?: 'Projects';
  seo?: Maybe<ProjectsSeo>;
  title: Scalars['String'];
  backgroundImage: Scalars['String'];
  mainImage?: Maybe<Scalars['String']>;
  completionDate: Scalars['String'];
  projectDescription?: Maybe<Scalars['JSON']>;
};

export type ProjectsDocument = Node & Document & {
  __typename?: 'ProjectsDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Projects;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type ProjectsConnectionEdges = {
  __typename?: 'ProjectsConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<ProjectsDocument>;
};

export type ProjectsConnection = Connection & {
  __typename?: 'ProjectsConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ProjectsConnectionEdges>>>;
};

export type HomeSeo = {
  __typename?: 'HomeSeo';
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  socialImage?: Maybe<Scalars['String']>;
};

export type HomeHero = {
  __typename?: 'HomeHero';
  title: Scalars['String'];
  subtitle: Scalars['String'];
  image: Scalars['String'];
};

export type HomeFeaturedProjectsProject1Document = ProjectsDocument;

export type HomeFeaturedProjectsProject2Document = ProjectsDocument;

export type HomeFeaturedProjectsProject3Document = ProjectsDocument;

export type HomeFeaturedProjects = {
  __typename?: 'HomeFeaturedProjects';
  project1?: Maybe<HomeFeaturedProjectsProject1Document>;
  project2?: Maybe<HomeFeaturedProjectsProject2Document>;
  project3?: Maybe<HomeFeaturedProjectsProject3Document>;
};

export type Home = {
  __typename?: 'Home';
  seo?: Maybe<HomeSeo>;
  hero?: Maybe<HomeHero>;
  featuredProjects?: Maybe<HomeFeaturedProjects>;
};

export type HomeDocument = Node & Document & {
  __typename?: 'HomeDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Home;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type HomeConnectionEdges = {
  __typename?: 'HomeConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<HomeDocument>;
};

export type HomeConnection = Connection & {
  __typename?: 'HomeConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<HomeConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateGlobalsDocument: GlobalsDocument;
  createGlobalsDocument: GlobalsDocument;
  updateProjectsDocument: ProjectsDocument;
  createProjectsDocument: ProjectsDocument;
  updateHomeDocument: HomeDocument;
  createHomeDocument: HomeDocument;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateGlobalsDocumentArgs = {
  relativePath: Scalars['String'];
  params: GlobalsMutation;
};


export type MutationCreateGlobalsDocumentArgs = {
  relativePath: Scalars['String'];
  params: GlobalsMutation;
};


export type MutationUpdateProjectsDocumentArgs = {
  relativePath: Scalars['String'];
  params: ProjectsMutation;
};


export type MutationCreateProjectsDocumentArgs = {
  relativePath: Scalars['String'];
  params: ProjectsMutation;
};


export type MutationUpdateHomeDocumentArgs = {
  relativePath: Scalars['String'];
  params: HomeMutation;
};


export type MutationCreateHomeDocumentArgs = {
  relativePath: Scalars['String'];
  params: HomeMutation;
};

export type DocumentMutation = {
  globals?: InputMaybe<GlobalsMutation>;
  projects?: InputMaybe<ProjectsMutation>;
  home?: InputMaybe<HomeMutation>;
};

export type GlobalsNavItemsMutation = {
  text?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  button?: InputMaybe<Scalars['Boolean']>;
};

export type GlobalsFooterContactFormTextMutation = {
  title?: InputMaybe<Scalars['String']>;
  shortText?: InputMaybe<Scalars['String']>;
};

export type GlobalsFooterMutation = {
  logo?: InputMaybe<Scalars['String']>;
  contactFormText?: InputMaybe<GlobalsFooterContactFormTextMutation>;
  contactDetails?: InputMaybe<Scalars['String']>;
};

export type GlobalsBrandColoursMutation = {
  primary?: InputMaybe<Scalars['String']>;
};

export type GlobalsBrandMutation = {
  colours?: InputMaybe<GlobalsBrandColoursMutation>;
};

export type GlobalsMutation = {
  logo?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<Scalars['String']>;
  navItems?: InputMaybe<Array<InputMaybe<GlobalsNavItemsMutation>>>;
  footer?: InputMaybe<GlobalsFooterMutation>;
  brand?: InputMaybe<GlobalsBrandMutation>;
};

export type ProjectsSeoMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  socialImage?: InputMaybe<Scalars['String']>;
};

export type ProjectsMutation = {
  seo?: InputMaybe<ProjectsSeoMutation>;
  title?: InputMaybe<Scalars['String']>;
  backgroundImage?: InputMaybe<Scalars['String']>;
  mainImage?: InputMaybe<Scalars['String']>;
  completionDate?: InputMaybe<Scalars['String']>;
  projectDescription?: InputMaybe<Scalars['JSON']>;
};

export type HomeSeoMutation = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  socialImage?: InputMaybe<Scalars['String']>;
};

export type HomeHeroMutation = {
  title?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
};

export type HomeFeaturedProjectsMutation = {
  project1?: InputMaybe<Scalars['String']>;
  project2?: InputMaybe<Scalars['String']>;
  project3?: InputMaybe<Scalars['String']>;
};

export type HomeMutation = {
  seo?: InputMaybe<HomeSeoMutation>;
  hero?: InputMaybe<HomeHeroMutation>;
  featuredProjects?: InputMaybe<HomeFeaturedProjectsMutation>;
};

export type GlobalsPartsFragment = { __typename?: 'Globals', logo: string, icon: string, navItems?: Array<{ __typename: 'GlobalsNavItems', text: string, url: string, button?: boolean | null } | null> | null, footer?: { __typename: 'GlobalsFooter', logo: string, contactDetails?: string | null, contactFormText?: { __typename: 'GlobalsFooterContactFormText', title?: string | null, shortText?: string | null } | null } | null, brand?: { __typename: 'GlobalsBrand', colours?: { __typename: 'GlobalsBrandColours', primary?: string | null } | null } | null };

export type ProjectsPartsFragment = { __typename?: 'Projects', title: string, backgroundImage: string, mainImage?: string | null, completionDate: string, projectDescription?: any | null, seo?: { __typename: 'ProjectsSeo', title: string, description?: string | null, socialImage?: string | null } | null };

export type HomePartsFragment = { __typename?: 'Home', seo?: { __typename: 'HomeSeo', title: string, description?: string | null, socialImage?: string | null } | null, hero?: { __typename: 'HomeHero', title: string, subtitle: string, image: string } | null, featuredProjects?: { __typename: 'HomeFeaturedProjects', project1?: { __typename?: 'ProjectsDocument', id: string } | null, project2?: { __typename?: 'ProjectsDocument', id: string } | null, project3?: { __typename?: 'ProjectsDocument', id: string } | null } | null };

export type GetGlobalsDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetGlobalsDocumentQuery = { __typename?: 'Query', getGlobalsDocument: { __typename?: 'GlobalsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Globals', logo: string, icon: string, navItems?: Array<{ __typename: 'GlobalsNavItems', text: string, url: string, button?: boolean | null } | null> | null, footer?: { __typename: 'GlobalsFooter', logo: string, contactDetails?: string | null, contactFormText?: { __typename: 'GlobalsFooterContactFormText', title?: string | null, shortText?: string | null } | null } | null, brand?: { __typename: 'GlobalsBrand', colours?: { __typename: 'GlobalsBrandColours', primary?: string | null } | null } | null } } };

export type GetGlobalsListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetGlobalsListQuery = { __typename?: 'Query', getGlobalsList: { __typename?: 'GlobalsConnection', totalCount: number, edges?: Array<{ __typename?: 'GlobalsConnectionEdges', node?: { __typename?: 'GlobalsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Globals', logo: string, icon: string, navItems?: Array<{ __typename: 'GlobalsNavItems', text: string, url: string, button?: boolean | null } | null> | null, footer?: { __typename: 'GlobalsFooter', logo: string, contactDetails?: string | null, contactFormText?: { __typename: 'GlobalsFooterContactFormText', title?: string | null, shortText?: string | null } | null } | null, brand?: { __typename: 'GlobalsBrand', colours?: { __typename: 'GlobalsBrandColours', primary?: string | null } | null } | null } } | null } | null> | null } };

export type GetProjectsDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetProjectsDocumentQuery = { __typename?: 'Query', getProjectsDocument: { __typename?: 'ProjectsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Projects', title: string, backgroundImage: string, mainImage?: string | null, completionDate: string, projectDescription?: any | null, seo?: { __typename: 'ProjectsSeo', title: string, description?: string | null, socialImage?: string | null } | null } } };

export type GetProjectsListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetProjectsListQuery = { __typename?: 'Query', getProjectsList: { __typename?: 'ProjectsConnection', totalCount: number, edges?: Array<{ __typename?: 'ProjectsConnectionEdges', node?: { __typename?: 'ProjectsDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Projects', title: string, backgroundImage: string, mainImage?: string | null, completionDate: string, projectDescription?: any | null, seo?: { __typename: 'ProjectsSeo', title: string, description?: string | null, socialImage?: string | null } | null } } | null } | null> | null } };

export type GetHomeDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetHomeDocumentQuery = { __typename?: 'Query', getHomeDocument: { __typename?: 'HomeDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Home', seo?: { __typename: 'HomeSeo', title: string, description?: string | null, socialImage?: string | null } | null, hero?: { __typename: 'HomeHero', title: string, subtitle: string, image: string } | null, featuredProjects?: { __typename: 'HomeFeaturedProjects', project1?: { __typename?: 'ProjectsDocument', id: string } | null, project2?: { __typename?: 'ProjectsDocument', id: string } | null, project3?: { __typename?: 'ProjectsDocument', id: string } | null } | null } } };

export type GetHomeListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetHomeListQuery = { __typename?: 'Query', getHomeList: { __typename?: 'HomeConnection', totalCount: number, edges?: Array<{ __typename?: 'HomeConnectionEdges', node?: { __typename?: 'HomeDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Home', seo?: { __typename: 'HomeSeo', title: string, description?: string | null, socialImage?: string | null } | null, hero?: { __typename: 'HomeHero', title: string, subtitle: string, image: string } | null, featuredProjects?: { __typename: 'HomeFeaturedProjects', project1?: { __typename?: 'ProjectsDocument', id: string } | null, project2?: { __typename?: 'ProjectsDocument', id: string } | null, project3?: { __typename?: 'ProjectsDocument', id: string } | null } | null } } | null } | null> | null } };

export const GlobalsPartsFragmentDoc = gql`
    fragment GlobalsParts on Globals {
  logo
  icon
  navItems {
    __typename
    text
    url
    button
  }
  footer {
    __typename
    logo
    contactFormText {
      __typename
      title
      shortText
    }
    contactDetails
  }
  brand {
    __typename
    colours {
      __typename
      primary
    }
  }
}
    `;
export const ProjectsPartsFragmentDoc = gql`
    fragment ProjectsParts on Projects {
  seo {
    __typename
    title
    description
    socialImage
  }
  title
  backgroundImage
  mainImage
  completionDate
  projectDescription
}
    `;
export const HomePartsFragmentDoc = gql`
    fragment HomeParts on Home {
  seo {
    __typename
    title
    description
    socialImage
  }
  hero {
    __typename
    title
    subtitle
    image
  }
  featuredProjects {
    __typename
    project1 {
      ... on Document {
        id
      }
    }
    project2 {
      ... on Document {
        id
      }
    }
    project3 {
      ... on Document {
        id
      }
    }
  }
}
    `;
export const GetGlobalsDocumentDocument = gql`
    query getGlobalsDocument($relativePath: String!) {
  getGlobalsDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...GlobalsParts
    }
  }
}
    ${GlobalsPartsFragmentDoc}`;
export const GetGlobalsListDocument = gql`
    query getGlobalsList {
  getGlobalsList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...GlobalsParts
        }
      }
    }
  }
}
    ${GlobalsPartsFragmentDoc}`;
export const GetProjectsDocumentDocument = gql`
    query getProjectsDocument($relativePath: String!) {
  getProjectsDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...ProjectsParts
    }
  }
}
    ${ProjectsPartsFragmentDoc}`;
export const GetProjectsListDocument = gql`
    query getProjectsList {
  getProjectsList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...ProjectsParts
        }
      }
    }
  }
}
    ${ProjectsPartsFragmentDoc}`;
export const GetHomeDocumentDocument = gql`
    query getHomeDocument($relativePath: String!) {
  getHomeDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...HomeParts
    }
  }
}
    ${HomePartsFragmentDoc}`;
export const GetHomeListDocument = gql`
    query getHomeList {
  getHomeList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...HomeParts
        }
      }
    }
  }
}
    ${HomePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      getGlobalsDocument(variables: GetGlobalsDocumentQueryVariables, options?: C): Promise<{data: GetGlobalsDocumentQuery, variables: GetGlobalsDocumentQueryVariables, query: string}> {
        return requester<{data: GetGlobalsDocumentQuery, variables: GetGlobalsDocumentQueryVariables, query: string}, GetGlobalsDocumentQueryVariables>(GetGlobalsDocumentDocument, variables, options);
      },
    getGlobalsList(variables?: GetGlobalsListQueryVariables, options?: C): Promise<{data: GetGlobalsListQuery, variables: GetGlobalsListQueryVariables, query: string}> {
        return requester<{data: GetGlobalsListQuery, variables: GetGlobalsListQueryVariables, query: string}, GetGlobalsListQueryVariables>(GetGlobalsListDocument, variables, options);
      },
    getProjectsDocument(variables: GetProjectsDocumentQueryVariables, options?: C): Promise<{data: GetProjectsDocumentQuery, variables: GetProjectsDocumentQueryVariables, query: string}> {
        return requester<{data: GetProjectsDocumentQuery, variables: GetProjectsDocumentQueryVariables, query: string}, GetProjectsDocumentQueryVariables>(GetProjectsDocumentDocument, variables, options);
      },
    getProjectsList(variables?: GetProjectsListQueryVariables, options?: C): Promise<{data: GetProjectsListQuery, variables: GetProjectsListQueryVariables, query: string}> {
        return requester<{data: GetProjectsListQuery, variables: GetProjectsListQueryVariables, query: string}, GetProjectsListQueryVariables>(GetProjectsListDocument, variables, options);
      },
    getHomeDocument(variables: GetHomeDocumentQueryVariables, options?: C): Promise<{data: GetHomeDocumentQuery, variables: GetHomeDocumentQueryVariables, query: string}> {
        return requester<{data: GetHomeDocumentQuery, variables: GetHomeDocumentQueryVariables, query: string}, GetHomeDocumentQueryVariables>(GetHomeDocumentDocument, variables, options);
      },
    getHomeList(variables?: GetHomeListQueryVariables, options?: C): Promise<{data: GetHomeListQuery, variables: GetHomeListQueryVariables, query: string}> {
        return requester<{data: GetHomeListQuery, variables: GetHomeListQueryVariables, query: string}, GetHomeListQueryVariables>(GetHomeListDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {}
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    })
  } catch (e) {
    // swallow errors related to document creation
    console.warn('Warning: There was an error when fetching data')
    console.warn(e)
  }

  return { data, query: doc, variables: vars || {} }
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)


# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
  getDocumentFields: JSON!
  getGlobalsDocument(relativePath: String): GlobalsDocument!
  getGlobalsList(before: String, after: String, first: Float, last: Float, sort: String): GlobalsConnection!
  getProjectsDocument(relativePath: String): ProjectsDocument!
  getProjectsList(before: String, after: String, first: Float, last: Float, sort: String): ProjectsConnection!
  getHomeDocument(relativePath: String): HomeDocument!
  getHomeList(before: String, after: String, first: Float, last: Float, sort: String): HomeConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = GlobalsDocument | ProjectsDocument | HomeDocument

type GlobalsNavItems {
  text: String!
  url: String!
  button: Boolean
}

type GlobalsFooterContactFormText {
  title: String
  shortText: String
}

type GlobalsFooter {
  logo: String!
  contactFormText: GlobalsFooterContactFormText
  contactDetails: String
}

type GlobalsBrandColours {
  primary: String
}

type GlobalsBrand {
  colours: GlobalsBrandColours
}

type Globals {
  logo: String!
  icon: String!
  navItems: [GlobalsNavItems]
  footer: GlobalsFooter
  brand: GlobalsBrand
}

type GlobalsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Globals!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type GlobalsConnectionEdges {
  cursor: String
  node: GlobalsDocument
}

type GlobalsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [GlobalsConnectionEdges]
}

type ProjectsSeo {
  title: String!
  description: String
  socialImage: String
}

type Projects {
  seo: ProjectsSeo
  title: String!
  backgroundImage: String!
  mainImage: String
  completionDate: String!
  projectDescription: JSON
}

type ProjectsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Projects!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ProjectsConnectionEdges {
  cursor: String
  node: ProjectsDocument
}

type ProjectsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ProjectsConnectionEdges]
}

type HomeSeo {
  title: String!
  description: String
  socialImage: String
}

type HomeHero {
  title: String!
  subtitle: String!
  image: String!
}

union HomeFeaturedProjectsProject1Document = ProjectsDocument

union HomeFeaturedProjectsProject2Document = ProjectsDocument

union HomeFeaturedProjectsProject3Document = ProjectsDocument

type HomeFeaturedProjects {
  project1: HomeFeaturedProjectsProject1Document
  project2: HomeFeaturedProjectsProject2Document
  project3: HomeFeaturedProjectsProject3Document
}

type Home {
  seo: HomeSeo
  hero: HomeHero
  featuredProjects: HomeFeaturedProjects
}

type HomeDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Home!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type HomeConnectionEdges {
  cursor: String
  node: HomeDocument
}

type HomeConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [HomeConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGlobalsDocument(relativePath: String!, params: GlobalsMutation!): GlobalsDocument!
  createGlobalsDocument(relativePath: String!, params: GlobalsMutation!): GlobalsDocument!
  updateProjectsDocument(relativePath: String!, params: ProjectsMutation!): ProjectsDocument!
  createProjectsDocument(relativePath: String!, params: ProjectsMutation!): ProjectsDocument!
  updateHomeDocument(relativePath: String!, params: HomeMutation!): HomeDocument!
  createHomeDocument(relativePath: String!, params: HomeMutation!): HomeDocument!
}

input DocumentMutation {
  globals: GlobalsMutation
  projects: ProjectsMutation
  home: HomeMutation
}

input GlobalsNavItemsMutation {
  text: String
  url: String
  button: Boolean
}

input GlobalsFooterContactFormTextMutation {
  title: String
  shortText: String
}

input GlobalsFooterMutation {
  logo: String
  contactFormText: GlobalsFooterContactFormTextMutation
  contactDetails: String
}

input GlobalsBrandColoursMutation {
  primary: String
}

input GlobalsBrandMutation {
  colours: GlobalsBrandColoursMutation
}

input GlobalsMutation {
  logo: String
  icon: String
  navItems: [GlobalsNavItemsMutation]
  footer: GlobalsFooterMutation
  brand: GlobalsBrandMutation
}

input ProjectsSeoMutation {
  title: String
  description: String
  socialImage: String
}

input ProjectsMutation {
  seo: ProjectsSeoMutation
  title: String
  backgroundImage: String
  mainImage: String
  completionDate: String
  projectDescription: JSON
}

input HomeSeoMutation {
  title: String
  description: String
  socialImage: String
}

input HomeHeroMutation {
  title: String
  subtitle: String
  image: String
}

input HomeFeaturedProjectsMutation {
  project1: String
  project2: String
  project3: String
}

input HomeMutation {
  seo: HomeSeoMutation
  hero: HomeHeroMutation
  featuredProjects: HomeFeaturedProjectsMutation
}

schema {
  query: Query
  mutation: Mutation
}
  